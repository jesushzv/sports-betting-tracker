// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Hashed password for email/password auth
  isDemo        Boolean   @default(false) // Flag to identify demo users
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  startingBankroll Float? @default(1000.0)

  accounts Account[]
  sessions Session[]
  picks    Pick[]
  parlays  Parlay[]
  bankrollHistory BankrollHistory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Sport {
  NFL
  NBA
  MLB
  NHL
  UFC
}

enum BetType {
  SPREAD
  MONEYLINE
  OVER_UNDER
  PARLAY
}

enum PickStatus {
  PENDING
  WON
  LOST
  PUSH
}

model Pick {
  id            String     @id @default(cuid())
  userId        String
  sport         Sport
  betType       BetType
  description   String     // e.g., "Lakers -5.5", "Over 220.5"
  odds          Float      // American odds format: -110, +150, etc.
  stake         Float      // Amount wagered
  potentialWin  Float      // Calculated potential winnings
  status        PickStatus @default(PENDING)
  gameDate      DateTime
  settledAt     DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parlayLegs    ParlayLeg[]
  bankrollHistory BankrollHistory[]

  @@index([userId, status])
  @@index([userId, sport])
  @@index([userId, gameDate])
}

model Parlay {
  id            String     @id @default(cuid())
  userId        String
  totalOdds     Float      // Combined odds for all legs
  stake         Float      // Amount wagered
  potentialWin  Float      // Calculated potential winnings
  status        PickStatus @default(PENDING)
  settledAt     DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  legs          ParlayLeg[]
  bankrollHistory BankrollHistory[]

  @@index([userId, status])
  @@index([userId, createdAt])
}

model ParlayLeg {
  id        String @id @default(cuid())
  parlayId  String
  pickId    String

  parlay    Parlay @relation(fields: [parlayId], references: [id], onDelete: Cascade)
  pick      Pick   @relation(fields: [pickId], references: [id], onDelete: Cascade)

  @@unique([parlayId, pickId])
}

enum BankrollTransactionType {
  DEPOSIT
  WITHDRAWAL
  WIN
  LOSS
  PUSH
}

model BankrollHistory {
  id        String                  @id @default(cuid())
  userId    String
  amount    Float
  type      BankrollTransactionType
  relatedPickId String?
  relatedParlayId String?
  timestamp DateTime                @default(now())
  notes     String?

  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  pick      Pick? @relation(fields: [relatedPickId], references: [id], onDelete: SetNull)
  parlay    Parlay? @relation(fields: [relatedParlayId], references: [id], onDelete: SetNull)

  @@index([userId, timestamp])
  @@index([userId, type])
}
